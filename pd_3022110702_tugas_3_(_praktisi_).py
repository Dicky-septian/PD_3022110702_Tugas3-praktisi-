# -*- coding: utf-8 -*-
"""PD_3022110702_Tugas 3 ( Praktisi ).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cKA7VnWjB__IOf6EHj6KiZ1UWEn2Spmi

Nama: Dicky Septian Hariadi

Nim: 3022110702


Prodi: Sistem Informasi

IMBALANCE SAMPLING
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import imblearn as imb
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()

from sklearn.datasets import fetch_20newsgroups
from sklearn.metrics import confusion_matrix

# load data
from google.colab import drive
drive.mount('/content/drive')
data = pd.read_csv('/content/drive/MyDrive/Classroom/Shopping_Dataset.csv')
print(len(data))
data.head(10)

data.isna().sum()

shopping_dataset = data.dropna()
print(len(shopping_dataset))
shopping_dataset.isna().sum()

sns.set(style='darkgrid')
sns.countplot(x='Purchase',data=shopping_dataset)

X = shopping_dataset.loc[:, shopping_dataset.columns != 'Purchase']
y = shopping_dataset.loc[:, shopping_dataset.columns == 'Purchase']

"""OVERSAMPLING"""

# minor = (sampling_strategy) * majority
# minor must more equal than minority
oversample = imb.over_sampling.RandomOverSampler(sampling_strategy='minority')

X_over, y_over = oversample.fit_resample(X, y)

len(X_over)

sns.set(style="darkgrid")
sns.countplot(x='Purchase',data=y_over)

"""UNDERSAMPING"""

# major = (1/sampling_strategy) * minority
# major must less equal than minority
undersample = imb.under_sampling.RandomUnderSampler(sampling_strategy='majority')

X_under, y_under = undersample.fit_resample(X, y)

len(X_under)

sns.set(style="darkgrid")
sns.countplot(x='Purchase',data=y_under)

"""COMBINATION"""

# over
over = imb.over_sampling.RandomOverSampler(sampling_strategy=0.5)
X_co, y_co = over.fit_resample(X, y)

# under
under = imb.under_sampling.RandomUnderSampler(sampling_strategy=0.8)
X_c, y_c = under.fit_resample(X_co, y_co)

# Visualisation
sns.set(style='darkgrid')
sns.countplot(x='Purchase',data=y_c)

"""UNDER TO OVER"""

# Under
under = imb.under_sampling.RandomUnderSampler(sampling_strategy=0.6)
X_co, y_co = under.fit_resample(X, y)

#Over
over = imb.over_sampling.RandomOverSampler(sampling_strategy=0.8)
X_c, y_c = over.fit_resample(X_co, y_co)

# Visualisation
sns.set(style='darkgrid')
sns.countplot(x='Purchase',data=y_c)

"""NAIVE BAYES"""

# load dataset
data = fetch_20newsgroups()

data.DESCR

data.target_names

categories = ['alt.atheism', 'soc.religion.christian', 'comp.graphics', 'sci.med']

train = fetch_20newsgroups(subset='train', categories=categories)
test = fetch_20newsgroups(subset='test', categories=categories)

print(len(test.target_names))
print(test.data[5])

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline

model = make_pipeline(TfidfVectorizer(), MultinomialNB())
model.fit(train.data, train.target)
labels = model.predict(test.data)

model.fit(train.data, train.target)
labels = model.predict(test.data)

mat = confusion_matrix(test.target, labels)
sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, xticklabels=train.target_names, yticklabels=train.target_names)

plt.xlabel('true label')
plt.ylabel('predicted label')
plt.show()

from sklearn.metrics import accuracy_score
acc_score = accuracy_score(test.target, labels)
print(acc_score)

# membuat fungsi prediksi data baru
def predict_category(s, train=train, model=model):
    pred = model.predict([s])
    return pred[0]

predict_category('Elon Musk launches Starlink in Indonesia')

predict_category("Toyota said its next generation of clean, compact engines is completely different from anything today")